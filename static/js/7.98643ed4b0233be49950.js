webpackJsonp([7,22],{42:function(e,t){"use strict";e.exports={mounted:function(){this.$nextTick(function(){var e=document.querySelectorAll("code");if(e.length>0)for(var t=0;t<e.length;t++)hljs.highlightBlock(e[t])})}}},69:function(e,t,r){var n,s;n=r(42);var i=r(95);s=n=n||{},"object"!=typeof n.default&&"function"!=typeof n.default||(s=n=n.default),"function"==typeof s&&(s=s.options),s.render=i.render,s.staticRenderFns=i.staticRenderFns,e.exports=n},95:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"page article"},[r("h2",{staticClass:"title"},[e._v("《ES6标准入门》笔记之五：数值的扩展")]),e._v(" "),e._m(0),e._v(" "),r("footer",[e._v("2017年03月17日")]),e._v(" "),r("comments")])},staticRenderFns:[function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"content"},[r("h3",{staticClass:"title"},[e._v("二进制和八进制数值表示法")]),e._v(" "),r("p",[e._v("ES6对二进制和八进制提供了新的表示方法：分别用前缀0b(0B)和0o(0O)表示：")]),e._v(" "),r("pre",[r("code",[e._v("0b111110111 === 503\n0o767 === 503")])]),e._v(" "),r("p",[e._v("在严格模式中，八进制数据不允许使用0前缀表示，需使用0o前缀。使用Number方法可以将这种前缀表示的数值字符串转为十进制数值：")]),e._v(" "),r("pre",[r("code",[e._v("Number('0b111110111') // 503\nNumber('0o767') // 503")])]),e._v(" "),r("h3",{staticClass:"title"},[e._v("Number.isFinite()、Number.isNaN()")]),e._v(" "),r("p",[e._v("分别用来检查Infinite和NaN这两个特殊值。")]),e._v(" "),r("p",[e._v("Number.isFinite()用来检查一个数值是否"),r("strong",[e._v("非无穷")]),e._v("（infinity）。")]),e._v(" "),r("p",[e._v("Number.isNaN()用来检查一个值是否为NaN。")]),e._v(" "),r("p",[e._v("这两个方法与传统的全局方法isFinite()和isNaN()的区别在于，"),r("strong",[e._v("传统的方法会先调用Number将非数值转为数值，再进行判断。而新方法只对数值有效。")])]),e._v(" "),r("pre",[r("code",[e._v("isFinite(25) // true\nisFinite('25') // true\nNumber.isFinite(25) // true\nNumber.isFinite('25') // false\nisNaN('NaN') // true\nNumber.isNaN('NaN') // false")])]),e._v(" "),r("h3",{staticClass:"title"},[e._v("Number.parseInt()、Number.parseFloat()")]),e._v(" "),r("p",[e._v("与传统的全局方法parseInt()和parseFloat()是等价的，只是移植到了Number对象上。")]),e._v(" "),r("p",[e._v("其目的是逐步减少全局方法，使语言逐步模块化。")]),e._v(" "),r("h3",{staticClass:"title"},[e._v("Number.isInteger()")]),e._v(" "),r("p",[e._v("用来判断一个值是否为整数。在JS内部，整数和浮点数是相同的存储方法，3和3.0是相同的数值。")]),e._v(" "),r("pre",[r("code",[e._v("Number.isInteger(3) // true\nNumber.isInteger(3.0) // true\nNumber.isInteger('3') // false")])]),e._v(" "),r("h3",{staticClass:"title"},[e._v("Number.EPSILON")]),e._v(" "),r("p",[e._v("新增的极小常量：")]),e._v(" "),r("pre",[r("code",[e._v('Number.EPSILON // 2.220446049250313e-16\nNumber.EPSILON.toFixed(20) // "0.00000000000000022204"')])]),e._v(" "),r("p",[e._v("因为浮点数的计算是不精确的，可以利用这个值设置误差范围：")]),e._v(" "),r("pre",[r("code",[e._v("function withinErrorMargin (v1, v2) { // 判断两个值是否相等（在一定误差范围之内）\n        return Math.abs(v1 - v2) < Number.EPSILON\n}\nwithinErrorMargin(0.1 + 0.2, 0.3) // true\n0.1+0.2 == 0.3 // false")])]),e._v(" "),r("h3",{staticClass:"title"},[e._v("Number.isSafeInteger()")]),e._v(" "),r("p",[e._v("JS可以精确表示的整数范围是-2"),r("sup",[e._v("53")]),e._v("~2"),r("sup",[e._v("53")]),e._v("之间，超出这个范围无法精确表示。ES6新增了"),r("strong",[e._v("Number.MAX_SAFE_INTEGER")]),e._v("和"),r("strong",[e._v("Number.MIN_SAFE_INTEGER")]),e._v("两个常量，用来表示这个范围的上下限。")]),e._v(" "),r("p",[e._v("Number.isSafeInteger()用来判断一个"),r("strong",[e._v("整数")]),e._v("是否位于这个范围之内。")]),e._v(" "),r("pre",[r("code",[e._v("Math.pow(2,53) // 9007199254740992\nMath.pow(2,53)+1 // 9007199254740992\nMath.pow(-2,53) // -9007199254740992\nMath.pow(-2,53)-1 // -9007199254740992\n\nNumber.MAX_SAFE_INTEGER // 9007199254740991\nNumber.MIN_SAFE_INTEGER // -9007199254740991")])]),e._v(" "),r("pre",[r("code",[e._v("Number.isSafeInteger('a') // false\nNumber.isSafeInteger(null) // false\nNumber.isSafeInteger(NaN) // false\nNumber.isSafeInteger(1.2) // false\nNumber.isSafeInteger(1.0) // true")])]),e._v(" "),r("h3",{staticClass:"title"},[e._v("Math对象的扩展")])])}]}}});