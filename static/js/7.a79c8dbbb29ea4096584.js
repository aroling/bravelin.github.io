webpackJsonp([7,26],{28:function(e,t){"use strict";e.exports={mounted:function(){this.$nextTick(function(){var e=document.querySelectorAll("code");if(e.length>0)for(var t=0;t<e.length;t++)hljs.highlightBlock(e[t])})}}},66:function(e,t,n){var o,a;o=n(28);var r=n(83);a=o=o||{},"object"!=typeof o.default&&"function"!=typeof o.default||(a=o=o.default),"function"==typeof a&&(a=a.options),a.render=r.render,a.staticRenderFns=r.staticRenderFns,e.exports=o},83:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"page article"},[n("h2",{staticClass:"title"},[e._v("《ES6标准入门》笔记之八：对象的扩展")]),e._v(" "),e._m(0),e._v(" "),n("footer",[e._v("2017年05月09日")]),e._v(" "),n("comments")],1)},staticRenderFns:[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"content"},[n("h3",{staticClass:"title"},[e._v("属性的简洁表示法")]),e._v(" "),n("p",[e._v("ES6允许直接写入变量和函数作为对象的属性和方法：")]),e._v(" "),n("pre",[n("code",[e._v("var foo = 'bar'\nvar baz = { foo } // { foo : 'bar' }\nvar o = {\n    method() { return 'abc' }\n}")])]),e._v(" "),n("p",[n("strong",[e._v("在对象中只写属性名，不写属性值，此时属性值等于属性名代表的变量。")])]),e._v(" "),n("p",[e._v("ES6允许字面量定义对象时使用表达式作为对象的属性名，即把表达式放在方括号内。")]),e._v(" "),n("pre",[n("code",[e._v("let propKey = 'foo'\nlet obj = { [propKey]: true, ['a' + 'bc']: 123 }")])]),e._v(" "),n("h3",{staticClass:"title"},[e._v("方法的name属性")]),e._v(" "),n("p",[e._v("函数的name属性返回函数的名称。对象方法也是函数，因此也有name属性。返回对应的方法名，如果是取值方法，则会在方法名之前加get"),n("strong",[e._v("(有疑问？)")]),e._v("；如果是存值方法，则会在方法名前加set。")]),e._v(" "),n("pre",[n("code",[e._v("var person = {\n    sayName: function () { return 'a' },\n    get firstName() { return 'b' }\n}\nconsole.log(person.sayName.name) // 'sayName'\nconsole.log(person.sayName.firstName) // 预期是'get firstName' chrom输出是undefined")])]),e._v(" "),n("p",[e._v("如果对象的方法是一个Symbol，name属性返回的是这个Symbol值的描述。")]),e._v(" "),n("pre",[n("code",[e._v('const k = Symbol("abc")\nlet obj = { [key]() { } }\nobj[key].name // "[abc]"')])]),e._v(" "),n("h3",{staticClass:"title"},[e._v("Object.is()")]),e._v(" "),n("p",[e._v("用于比较两个值是否严格相等。与严格比较符（===）的行为基本一致。不同之处是：+0不等于-0；NaN等于自身。")]),e._v(" "),n("pre",[n("code",[e._v("+0 === -0 // true\nNaN === NaN // false\nObject.is(+0,-0) // false\nObject.is(NaN, NaN) // true")])])])}]}}});